<?phpclass Client extends Eloquent{	protected $table = 'clients';    protected $fillable = [        'name',        'email',        'telephone',        'mobile',        'address1',        'address2',        'address3',        'address4',        'postcode',        'heard_about',        'qb_customer_ref'    ];    protected $guarded = ['deleted', 'id'];    public function scopeNotDeleted($query)    {        return $query->where('deleted', false);    }    public function bookings()    {        return $this->hasMany('Booking');    }        public function hasActiveBookings()    {        return count($this->bookings()->confirmed()->where('date','>=',date('Y-m-d'))->first()) > 0;    }        public static function get_selection($emptyitem_text = 'Select a client')    {        $selection = [];                if($emptyitem_text) $selection[0] =  $emptyitem_text;                $clients = \Client::all();                foreach($clients as $client) {            $selection[$client->id] = $client->name;        }                return $selection;    }    /*     * If email exists and booking is open, update client details,     * otherwise create a new client     */    public static function storeClient($attributes)    {        $clients_with_same_email = Client::where('email', $attributes['email'])            ->where('deleted', 0)->get();        if ($clients_with_same_email->count() == 0) return Client::create($attributes);        foreach($clients_with_same_email as $existing_client) {            foreach($existing_client->bookings as $booking) {                if ($booking->isOpen) return Client::create($attributes);            }        }        $client_to_update = $clients_with_same_email->first();        $client_to_update->update($attributes);        return $client_to_update;    }}